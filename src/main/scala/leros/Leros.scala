/*
 * Leros, a Tiny Microprocessor
 *
 * Author: Martin Schoeberl (martin@jopdesign.com)
 */

package leros

import chisel3._
import chisel3.util._

import leros.util._

object Types {
  val nop :: add :: sub :: and :: or :: xor :: ld :: shr :: Nil = Enum(8)
}


class Debug extends Bundle {
  val acc = Output(SInt())
  val pc = Output(UInt())
  val instr = Output(UInt())
  val exit = Output(Bool())
}

/**
  * Instruction memory.
  * Contains the register for using the on-chip ROM.
  * Uses Chisel synchronous reset to also execute the first instruction.
  */
class InstrMem(memSize: Int, prog: String) extends Module {
  val io = IO(new Bundle {
    val addr = Input(UInt(memSize.W))
    val instr = Output(UInt(16.W))
  })
  val progMem = VecInit(Assembler.getProgram(prog).map(_.asUInt(16.W)))
  val memReg = RegInit(0.U(memSize.W))
  memReg := io.addr
  io.instr := progMem(memReg)
}

/**
  * Leros top level
  */
class Leros(size: Int, memSize: Int, prog: String) extends Module {
  val io = IO(new Bundle {
    val dout = Output(UInt(32.W))
    val dbg = new Debug
  })

  // The main architectural state
//  val accuReg = RegInit(0.U(size.W))
  val pcReg = RegInit(0.U(memSize.W))
  val addrReg = RegInit(0.U(memSize.W))

  // do we need register duplication, using the PC + x as input, to get a memory for this?
  // The synchronous reset, generated by Chisel, should be fine.
  val pcNext = pcReg + 1.U
  pcReg := pcNext

  val mem = Module(new InstrMem(memSize, prog))
  mem.io.addr := pcNext
  val instr = mem.io.instr

  // Maybe decoding and sign extension into fetch
  // Play around with the pipeline registers when (1) more complete ALU and (2) longer programs (= block RAM)
  // Several different pipeline organizations might be interesting

  // Decode
  val dec = Module(new Decode())
  dec.io.din := instr(15, 8)
  val decout = dec.io.dout


  // Operand
  val operand = Wire(SInt(size.W))
  /*
  when(decout.nosext) {
//    operand := 0.S(24.W) ## instr(7, 0).asSInt // no sign extension
    operand := (instr(7, 0).asSInt << 8) ## 0.S(8.W)
  } .elsewhen(decout.enahi) {
    operand := (instr(7, 0).asSInt << 8) ## 0.S(8.W)
  } .elsewhen(decout.enah2i) {
    operand := (instr(7, 0).asSInt << 16) ## 0.S(16.W)
  } .elsewhen(decout.enah3i) {
    operand := (instr(7, 0).asSInt << 24) ## 0.S(24.W)
  } .otherwise {
    operand := instr(7, 0).asSInt
  }
  */
  operand := 0.S


  val opReg = RegNext(operand)
  val accuReg = RegInit(0.S(size.W))

  // TODO: decide where the pipeline registers are placed
  // now we have a mix between here for the decode and outside for operand

  val funcReg = RegNext(decout.func)
  val enaReg = RegInit(false.B)
  enaReg := decout.ena

  val alu = Module(new Alu(size))

  alu.io.op := funcReg
  alu.io.a := accuReg
  alu.io.b := opReg

  when (enaReg) {
    accuReg := alu.io.y
  }

  val exit = RegInit(false.B)
  exit := RegNext(dec.io.dout.exit)

  println("Generating Leros")
  io.dout := 42.U

  if (false) {
    io.dbg.acc := RegNext((accuReg))
    io.dbg.pc := RegNext((pcReg))
    io.dbg.instr := RegNext((instr))
    io.dbg.exit := RegNext((exit))
  } else {
    io.dbg.acc := ((accuReg))
    io.dbg.pc := ((pcReg))
    io.dbg.instr := ((instr))
    io.dbg.exit := ((exit))
  }
}

object Leros extends App {
  Driver.execute(Array("--target-dir", "generated"), () => new Leros(32, 10, args(0)))
}
